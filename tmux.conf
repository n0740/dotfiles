# Mac OS X clipboard integration
if-shell 'test "$(uname -s)" = Darwin' 'set -g default-command "reattach-to-user-namespace -l ${SHELL}"'

# Act like screen
unbind C-b
set -g prefix C-a

# Ensure that we can send Ctrl-A to other apps
bind-key a send-prefix
bind-key -n C-\\ send-prefix

# Splitting panes and change to current directory
bind | split-window -c '#{pane_current_path}' -h
bind \\ split-window -c '#{pane_current_path}' -h
bind - split-window -c '#{pane_current_path}' -v

# Open new windows in the current directory
bind c new-window -c '#{pane_current_path}'

# Open new window and set name for it
bind C command-prompt -p name: "new-window -c '#{pane_current_path}' -n '%1'"

# Navigate between panes like Vim
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Resizing panes
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# Cycle through the windows
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# Switch to last visited window
bind C-a last-window

# Cycle through the sessions
bind-key -r C-j switch-client -n
bind-key -r C-k switch-client -p

# Enable Vim keybindings in copy mode
setw -g mode-keys vi

# Set Vim keys for copy mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# Use up and down arrows for temporary "maximize"
unbind Up; bind Up resize-pane -Z
unbind Down; bind Down resize-pane -Z

# Move current window
unbind Left; bind Left swap-window -t -1 ';' select-window -t -1
unbind Right; bind Right swap-window -t +1 ';' select-window -t +1

# A key to toggle between smallest and largest sizes if a window is visible in
# multiple places
# bind F set -w window-size

# Reload tmux
bind r source-file ~/.tmux.conf ';' display-message "tmux config reloaded!"

# Open man in new pane
bind m command-prompt -p man: "split-window -h 'man %1'"

bind '<' command-prompt -p rename-session: "rename-session %1"

# Use 256 colour terminal
set -g default-terminal "screen-256color"

# Set the default input delay to improve Vim performance
set -sg escape-time 0

# Increase scrollback lines
set -g history-limit 30000

# Window index start at 1
set -g base-index 1

# Pane index start at 1
setw -g pane-base-index 1

# Renumber windows sequentially after closing any of them
set -g renumber-windows on

# Some extra key bindings to select higher numbered windows
bind F1 selectw -t:10
bind F2 selectw -t:11
bind F3 selectw -t:12
bind F4 selectw -t:13
bind F5 selectw -t:14
bind F6 selectw -t:15
bind F7 selectw -t:16
bind F8 selectw -t:17
bind F9 selectw -t:18
bind F10 selectw -t:19
bind F11 selectw -t:20
bind F12 selectw -t:21

# Turn the mouse on, but without copy mode dragging
# set -g mouse on
# unbind -n MouseDrag1Pane
# unbind -Tcopy-mode MouseDrag1Pane

# Allow mouse scrolling and selecting
# set -g mode-mouse on
# set -g mouse-select-pane on
# set -g mouse-resize-pane on
# set -g mouse-select-window on

# Turn the mouse on, but without copy mode dragging
# set -g mouse on
# unbind -n MouseDrag1Pane
# unbind -temacs-copy MouseDrag1Pane

# Toggle mouse on
# bind-key M \\
#   set-option -g mouse on ';'
#   display-message 'Mouse: on'

# Toggle mouse off
# bind-key m \\
#   set-option -g mouse off ';'
#   display-message 'Mouse: off'

# Update the status bar every interval seconds
set -g status-interval 3

# Status line colors
set -g status-style fg=white,bg=black,bright

# Color of the window list
# setw -g window-status-style fg=cyan,bg=default,dim
setw -g window-status-style fg=cyan,bg=default

# Colors for the active window
setw -g window-status-current-style fg=white,bg=red,bright

# Command / message line colors
set -g message-style fg=white,bg=black,bright

# Centering the Window List
set -g status-justify centre

# Status line left side
set -g status-left-length 30
set -g status-left "#[fg=green][#{session_name}]"

# Status line right side
# set -g status-right "#[fg=white]%d %b %H:%M"
# set -g status-right "#(tmux_mail_count.js) #(tmux_time_color.sh)%d %b %H:%M"
# set -g status-right "#(tmux_input_source.sh) #(tmux_mail_count.js) #(tmux_time_color.sh)%d %b %H:%M"
set -g status-right "#(tmux_input_source.sh) #(tmux_time_color.sh)%d %b %H:%M"

# Activity window + enable activity alerts
set -g visual-activity on
setw -g monitor-activity on
setw -g window-status-activity-style fg=white,bg=cyan,bright

# # Smart pane switching with awareness of vim splits
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# # Restoring clear screen
# # WARNING: It breaks previous bindings! Do use it.
# bind C-l send-keys 'C-l'

# fix ssh agent when tmux is detached
setenv -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# prefix-Ctrl-s: save
# prefix-Ctrl-r: restore
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

set -g @continuum-restore 'on'

# Local config
if-shell "[ -f ~/.tmux.conf.local ]" 'source ~/.tmux.conf.local'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# Press prefix + I (capital i, as in Install) to fetch the plugin.
# Press prefix + alt + u (lowercase u as in uninstall) to remove the plugin.
run -b '~/.tmux/plugins/tpm/tpm'
